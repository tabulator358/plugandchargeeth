"use client";

import { useState, useEffect, useMemo, useCallback, useRef } from "react";
import { useAccount } from "wagmi";
import { 
  TruckIcon as CarIcon, 
  PlusIcon, 
  MagnifyingGlassIcon,
  BoltIcon,
  CurrencyDollarIcon,
  CheckCircleIcon,
  XCircleIcon,
  ClockIcon,
  StarIcon,
  MapPinIcon,
  ExclamationTriangleIcon
} from "@heroicons/react/24/outline";
import { 
  useScaffoldReadContract, 
  useScaffoldWriteContract,
  useScaffoldEventHistory,
  useDeployedContractInfo
} from "~~/hooks/scaffold-eth";
import { Address } from "~~/components/scaffold-eth/Address/Address";
import { parseUnits, formatUnits } from "viem";
import Link from "next/link";
import { formatUSDC, decodeHexToString } from "~~/utils/formatting";

interface Vehicle {
  vehicleHash: string;
  chipId: string;
  iso15118Enabled: boolean;
  publicKeyHash: string;
}

interface Charger {
  chargerId: string;
  owner: string;
  latE7: number;
  lngE7: number;
  pricePerKWhMilliUSD: number;
  powerKW: number;
  active: boolean;
}

interface ChargingSession {
  sessionId: string;
  driver: string;
  sponsor: string;
  vehicleHash: string;
  chargerId: string;
  state: number;
  reserved: string;
  proposed: string;
  startTs: number;
  endTs: number;
  proposeTs: number;
}

const DriverPage = () => {
  const { address: connectedAddress } = useAccount();
  const [vehicles, setVehicles] = useState<Vehicle[]>([]);
  const [trustedChargers, setTrustedChargers] = useState<Charger[]>([]);
  const [showAddCharger, setShowAddCharger] = useState(false);
  const [newChargerId, setNewChargerId] = useState("");
  const [showAddVehicle, setShowAddVehicle] = useState(false);
  const [newVehicleName, setNewVehicleName] = useState("");
  const [newChipId, setNewChipId] = useState("");
  const [newIso15118Enabled, setNewIso15118Enabled] = useState(true);
  const [newIso15118Identifier, setNewIso15118Identifier] = useState("");
  const [selectedOperator, setSelectedOperator] = useState("");
  const [addChargerMode, setAddChargerMode] = useState<"id" | "operator">("id");
  const [selectedChargerId, setSelectedChargerId] = useState("");
  const [approvalAmount, setApprovalAmount] = useState("1000");
  const [operatorChargers, setOperatorChargers] = useState<number[]>([]);
  const [selectedVehicleHash, setSelectedVehicleHash] = useState("");
  const [sessionDeposit, setSessionDeposit] = useState("50");
  const [sessionSalt, setSessionSalt] = useState("");
  const [sessionIso15118Id, setSessionIso15118Id] = useState("");
  
  // Refs to prevent infinite updates
  const processingRef = useRef(false);
  const lastProcessedEvents = useRef<{
    vehicles: any[];
    chargers: any[];
    sessions: any[];
  }>({ vehicles: [], chargers: [], sessions: [] });

  // Read USDC balance
  const { data: usdcBalance } = useScaffoldReadContract({
    contractName: "MockUSDC",
    functionName: "balanceOf",
    args: connectedAddress ? [connectedAddress] : undefined,
  });

  // Get PlugAndChargeCore contract address dynamically
  const { data: plugAndChargeContract } = useDeployedContractInfo({
    contractName: "PlugAndChargeCore",
  });

  // Read USDC allowance for PlugAndChargeCore
  const { data: usdcAllowance } = useScaffoldReadContract({
    contractName: "MockUSDC",
    functionName: "allowance",
    args: connectedAddress && plugAndChargeContract?.address 
      ? [connectedAddress, plugAndChargeContract.address] 
      : undefined,
  });

  // Read chargers by operator
  const { data: operatorChargersData } = useScaffoldReadContract({
    contractName: "ChargerRegistry",
    functionName: "getChargersByOwner",
    args: selectedOperator ? [selectedOperator as `0x${string}`] : undefined,
  });

  // Write contract hooks
  const { writeContractAsync: writeUSDCAsync } = useScaffoldWriteContract({
    contractName: "MockUSDC",
  });

  const { writeContractAsync: writePlugAndChargeAsync } = useScaffoldWriteContract({
    contractName: "PlugAndChargeCore",
  });

  const { writeContractAsync: writeVehicleRegistryAsync } = useScaffoldWriteContract({
    contractName: "VehicleRegistry",
  });

  const { writeContractAsync: writeChargerRegistryAsync } = useScaffoldWriteContract({
    contractName: "ChargerRegistry",
  });

  // Event history for vehicles
  const { data: vehicleEvents } = useScaffoldEventHistory({
    contractName: "VehicleRegistry",
    eventName: "VehicleRegistered",
    // watch: true, // Removed - only load once, refresh on reload
  });

  // Event history for trusted chargers
  const { data: trustedChargerEvents } = useScaffoldEventHistory({
    contractName: "PlugAndChargeCore",
    eventName: "TrustedChargerSet",
    // watch: true, // Removed - only load once, refresh on reload
  });

  // Event history for charging sessions
  const { data: sessionEvents } = useScaffoldEventHistory({
    contractName: "PlugAndChargeCore",
    eventName: "SessionCreated",
    // watch: true, // Removed - only load once, refresh on reload
  });

  // Stable address for comparison
  const stableAddress = useMemo(() => connectedAddress?.toLowerCase(), [connectedAddress]);

  // Update operator chargers when data changes
  useEffect(() => {
    if (operatorChargersData) {
      setOperatorChargers(operatorChargersData.map(id => Number(id)));
    } else {
      setOperatorChargers([]);
    }
  }, [operatorChargersData]);

  // First, get basic vehicle data from events
  const basicVehicles = useMemo(() => {
    if (!vehicleEvents || !stableAddress) return [];
    
    return vehicleEvents
      .filter(event => event.args.driver?.toLowerCase() === stableAddress)
      .map(event => ({
        vehicleHash: event.args.vehicleHash || "",
        chipId: event.args.chipId || "",
        iso15118Enabled: event.args.iso15118Enabled || false,
      }));
  }, [vehicleEvents, stableAddress]);

  // Get vehicle hashes for contract reads
  const vehicleHashes = basicVehicles.map(v => v.vehicleHash);

  // Contract reads for public key hashes
  const { data: publicKeyHash1 } = useScaffoldReadContract({
    contractName: "VehicleRegistry",
    functionName: "getPublicKey",
    args: vehicleHashes[0] ? [vehicleHashes[0] as `0x${string}`] : undefined,
  } as any);

  const { data: publicKeyHash2 } = useScaffoldReadContract({
    contractName: "VehicleRegistry",
    functionName: "getPublicKey",
    args: vehicleHashes[1] ? [vehicleHashes[1] as `0x${string}`] : undefined,
  } as any);

  const { data: publicKeyHash3 } = useScaffoldReadContract({
    contractName: "VehicleRegistry",
    functionName: "getPublicKey",
    args: vehicleHashes[2] ? [vehicleHashes[2] as `0x${string}`] : undefined,
  } as any);

  const { data: publicKeyHash4 } = useScaffoldReadContract({
    contractName: "VehicleRegistry",
    functionName: "getPublicKey",
    args: vehicleHashes[3] ? [vehicleHashes[3] as `0x${string}`] : undefined,
  } as any);

  const { data: publicKeyHash5 } = useScaffoldReadContract({
    contractName: "VehicleRegistry",
    functionName: "getPublicKey",
    args: vehicleHashes[4] ? [vehicleHashes[4] as `0x${string}`] : undefined,
  } as any);

  // Debug logging for public key hashes
  console.log('publicKeyHash1:', publicKeyHash1);
  console.log('publicKeyHash2:', publicKeyHash2);
  console.log('publicKeyHash3:', publicKeyHash3);
  console.log('publicKeyHash4:', publicKeyHash4);
  console.log('publicKeyHash5:', publicKeyHash5);

  // Now combine basic vehicle data with public key hashes
  const processedVehicles = useMemo(() => {
    return basicVehicles.map((vehicle, index) => {
      // Get the corresponding public key hash based on index
      let publicKeyHash = "";
      if (index === 0) publicKeyHash = (publicKeyHash1 as unknown as string) || "";
      else if (index === 1) publicKeyHash = (publicKeyHash2 as unknown as string) || "";
      else if (index === 2) publicKeyHash = (publicKeyHash3 as unknown as string) || "";
      else if (index === 3) publicKeyHash = (publicKeyHash4 as unknown as string) || "";
      else if (index === 4) publicKeyHash = (publicKeyHash5 as unknown as string) || "";
      
      return {
        ...vehicle,
        publicKeyHash: publicKeyHash,
      };
    });
  }, [basicVehicles, publicKeyHash1, publicKeyHash2, publicKeyHash3, publicKeyHash4, publicKeyHash5]);

  // Load vehicles for connected address
  useEffect(() => {
    if (processingRef.current) return;
    
    // Only update if data has actually changed
    const vehiclesChanged = JSON.stringify(processedVehicles) !== JSON.stringify(lastProcessedEvents.current.vehicles);
    if (vehiclesChanged) {
      processingRef.current = true;
      setVehicles(processedVehicles);
      lastProcessedEvents.current.vehicles = processedVehicles;
      processingRef.current = false;
    }
  }, [processedVehicles]);

  // Memoize processed trusted chargers to prevent infinite loops
  const processedTrustedChargers = useMemo(() => {
    if (!trustedChargerEvents || !stableAddress) return [];
    
    return trustedChargerEvents
      .filter(event => 
        event.args.driver?.toLowerCase() === stableAddress && 
        event.args.trusted === true
      )
      .map(event => ({
        chargerId: event.args.chargerId?.toString() || "",
        owner: "0x0000000000000000000000000000000000000000", // Placeholder - would need to fetch from ChargerRegistry
        latE7: 0,
        lngE7: 0,
        pricePerKWhMilliUSD: 0,
        powerKW: 0,
        active: true,
      }));
  }, [trustedChargerEvents, stableAddress]);

  // Load trusted chargers
  useEffect(() => {
    if (processingRef.current) return;
    
    // Only update if data has actually changed
    const chargersChanged = JSON.stringify(processedTrustedChargers) !== JSON.stringify(lastProcessedEvents.current.chargers);
    if (chargersChanged) {
      processingRef.current = true;
      setTrustedChargers(processedTrustedChargers);
      lastProcessedEvents.current.chargers = processedTrustedChargers;
      processingRef.current = false;
    }
  }, [processedTrustedChargers]);

  // Get all session IDs for the connected driver
  const sessionIds = useMemo(() => {
    if (!sessionEvents || !stableAddress) return [];
    
    return sessionEvents
      .filter(event => event.args.driver?.toLowerCase() === stableAddress)
      .map(event => event.args.sessionId?.toString() || "")
      .filter(id => id !== "");
  }, [sessionEvents, stableAddress]);

  // Event history for charge proposals
  const { data: chargeProposedEvents } = useScaffoldEventHistory({
    contractName: "PlugAndChargeCore",
    eventName: "ChargeProposed",
    // watch: true, // Removed - only load once, refresh on reload
  });

  // Event history for session disputes
  const { data: sessionDisputedEvents } = useScaffoldEventHistory({
    contractName: "PlugAndChargeCore",
    eventName: "Disputed",
    // watch: true, // Removed - only load once, refresh on reload
  });

  // Event history for session settlement
  const { data: sessionSettledEvents } = useScaffoldEventHistory({
    contractName: "PlugAndChargeCore",
    eventName: "Settled",
    // watch: true, // Removed - only load once, refresh on reload
  });

  // Event history for refund claims
  const { data: refundClaimedEvents } = useScaffoldEventHistory({
    contractName: "PlugAndChargeCore",
    eventName: "Refunded",
    // watch: true, // Removed - only load once, refresh on reload
  });

  // Vehicle lookup by ISO-15118 identifier using new contract function
  const { data: vehicleHashByIso15118 } = useScaffoldReadContract({
    contractName: "VehicleRegistry",
    functionName: "getVehicleByIso15118Identifier",
    args: sessionIso15118Id && sessionIso15118Id.trim().length > 0 ? [sessionIso15118Id.trim()] : undefined,
  } as any);

  // Debug logging for ISO-15118 lookup
  useEffect(() => {
    if (sessionIso15118Id) {
      console.log("🔍 Driver ISO-15118 lookup - Input:", sessionIso15118Id);
      console.log("🔍 Driver ISO-15118 lookup - Vehicle Hash:", vehicleHashByIso15118);
    }
  }, [sessionIso15118Id, vehicleHashByIso15118]);


  // Get ISO-15118 status for each vehicle
  const vehicleIso15118Status = useMemo(() => {
    const status: Record<string, boolean> = {};
    vehicles.forEach(vehicle => {
      // We'll use the existing iso15118Enabled from the vehicle data
      status[vehicle.vehicleHash] = vehicle.iso15118Enabled;
    });
    return status;
  }, [vehicles]);

  // Vehicle component with its own hook for ISO-15118 identifier
  const VehicleCard = ({ vehicle, index }: { vehicle: any; index: number }) => {
    const { data: vehicleIso15118Identifier } = useScaffoldReadContract({
      contractName: "VehicleRegistry",
      functionName: "getIso15118Identifier",
      args: vehicle.vehicleHash ? [vehicle.vehicleHash as `0x${string}`] : undefined,
    } as any);

    return (
      <div className="bg-gradient-to-br from-gray-900/50 to-gray-800/50 backdrop-blur-sm p-6 rounded-3xl border border-blue-500/20">
        <div className="flex items-center gap-3 mb-4">
          <CarIcon className="w-8 h-8 text-blue-400" />
          <h3 className="text-lg font-bold text-blue-400">Vehicle #{index + 1}</h3>
        </div>
        <div className="space-y-2 text-sm">
          <div>
            <span className="text-gray-500">Vehicle Name:</span>
            <p className="text-white font-medium">
              {decodeHexToString(vehicle.vehicleHash).startsWith('Hash:') 
                ? `Vehicle #${index + 1}` 
                : decodeHexToString(vehicle.vehicleHash)
              }
            </p>
          </div>
          <div>
            <span className="text-gray-500">Chip ID:</span>
            <p className="text-white font-medium">
              {decodeHexToString(vehicle.chipId).startsWith('Hash:') 
                ? `Chip #${index + 1}` 
                : decodeHexToString(vehicle.chipId)
              }
            </p>
          </div>
          <div>
            <span className="text-gray-500">ISO-15118 Code:</span>
            {vehicle.iso15118Enabled ? (
              <div>
                <p className="text-white font-medium font-mono text-sm">
                  {vehicleIso15118Identifier && vehicleIso15118Identifier !== "" 
                    ? vehicleIso15118Identifier
                    : "Not set"
                  }
                </p>
                <p className="text-xs text-gray-500 font-mono break-all">
                  Raw: {(vehicle.publicKeyHash as unknown as string) || "undefined"}
                </p>
              </div>
            ) : (
              <p className="text-red-400 text-sm">Not Available</p>
            )}
          </div>
          <div className="pt-2 border-t border-gray-600">
            <span className="text-gray-500 text-xs">Unique Identifier:</span>
            <p className="text-gray-400 font-mono text-xs break-all">{vehicle.vehicleHash}</p>
          </div>
        </div>
      </div>
    );
  };

  // Process complete session data from events with state tracking
  const processedSessions = useMemo(() => {
    if (!sessionEvents || !stableAddress) return [];
    
    return sessionEvents
      .filter(event => event.args.driver?.toLowerCase() === stableAddress)
      .map(event => {
        const sessionId = event.args.sessionId?.toString() || "";
        
        // Determine session state from events
        let state = 1; // Default to active
        let proposed = "0";
        let proposeTs = 0;
        
        // Check if charge was proposed
        const chargeProposed = chargeProposedEvents?.find(e => e.args.sessionId?.toString() === sessionId);
        if (chargeProposed) {
          state = 2; // Proposed
          proposed = chargeProposed.args.amount?.toString() || "0";
          proposeTs = Number(chargeProposed.blockNumber) || 0;
        }
        
        // Note: We don't have a separate "ProposalAccepted" event, 
        // the proposal stays in state 2 until settled or disputed
        
        // Check if session was disputed
        const sessionDisputed = sessionDisputedEvents?.find(e => e.args.sessionId?.toString() === sessionId);
        if (sessionDisputed) {
          state = 3; // Disputed
        }
        
        // Check if session was settled
        const sessionSettled = sessionSettledEvents?.find(e => e.args.sessionId?.toString() === sessionId);
        if (sessionSettled) {
          state = 4; // Settled
        }
        
        // Check if refund was claimed
        const refundClaimed = refundClaimedEvents?.find(e => e.args.sessionId?.toString() === sessionId);
        if (refundClaimed) {
          state = 5; // Refunded
        }
        
        return {
          sessionId,
        driver: event.args.driver || "",
        sponsor: event.args.sponsor || "",
        vehicleHash: event.args.vehicleHash || "",
        chargerId: event.args.chargerId?.toString() || "",
          state,
        reserved: event.args.initialDeposit?.toString() || "0",
          proposed,
          startTs: Number(event.blockNumber) || 0,
        endTs: 0,
          proposeTs,
        };
      });
  }, [sessionEvents, stableAddress, chargeProposedEvents, sessionDisputedEvents, sessionSettledEvents, refundClaimedEvents]);

  // Split sessions by state
  const activeSessions = processedSessions.filter(s => s.state === 1);
  const proposedSessions = processedSessions.filter(s => s.state === 2);
  const disputedSessions = processedSessions.filter(s => s.state === 3);
  const completedSessions = processedSessions.filter(s => s.state === 4 || s.state === 5);

  // Update sessions when data changes
  useEffect(() => {
    if (processingRef.current) return;
    
    // Only update if data has actually changed
    const sessionsChanged = JSON.stringify(processedSessions) !== JSON.stringify(lastProcessedEvents.current.sessions);
    if (sessionsChanged) {
      processingRef.current = true;
      lastProcessedEvents.current.sessions = processedSessions;
      processingRef.current = false;
    }
  }, [processedSessions]);

  // Approve USDC for PlugAndChargeCore
  const handleApproveUSDC = async () => {
    if (!connectedAddress || !approvalAmount || !plugAndChargeContract?.address) return;
    
    try {
      await writeUSDCAsync({
        functionName: "approve",
        args: [plugAndChargeContract.address, parseUnits(approvalAmount, 6)],
      });
    } catch (error) {
      console.error("Error approving USDC:", error);
    }
  };

  // Add trusted charger
  const handleAddTrustedCharger = async () => {
    if (!connectedAddress || !newChargerId) return;
    
    try {
      await writePlugAndChargeAsync({
        functionName: "setTrustedCharger",
        args: [connectedAddress, BigInt(newChargerId), true],
      });
      setNewChargerId("");
      setShowAddCharger(false);
    } catch (error) {
      console.error("Error adding trusted charger:", error);
    }
  };

  // Remove trusted charger
  const handleRemoveTrustedCharger = async (chargerId: string) => {
    if (!connectedAddress) return;
    
    try {
      await writePlugAndChargeAsync({
        functionName: "setTrustedCharger",
        args: [connectedAddress, BigInt(chargerId), false],
      });
    } catch (error) {
      console.error("Error removing trusted charger:", error);
    }
  };

  // Add vehicle
  const handleAddVehicle = async () => {
    if (!newVehicleName || !newChipId || !newIso15118Identifier) return;
    
    try {
      // Convert strings to bytes32 hashes
      const vehicleHash = `0x${Buffer.from(newVehicleName).toString('hex').padStart(64, '0')}` as `0x${string}`;
      const chipId = `0x${Buffer.from(newChipId).toString('hex').padStart(64, '0')}` as `0x${string}`;
      const publicKeyHash = `0x${Buffer.from(newIso15118Identifier).toString('hex').padStart(64, '0')}` as `0x${string}`;
      
      await writeVehicleRegistryAsync({
        functionName: "registerVehicle",
        args: [
          vehicleHash,
          chipId,
          newIso15118Enabled,
          publicKeyHash,
          newIso15118Identifier // ISO 15118 identifier as string
        ],
      });
      setNewVehicleName("");
      setNewChipId("");
      setNewIso15118Identifier("");
      setShowAddVehicle(false);
    } catch (error) {
      console.error("Error adding vehicle:", error);
    }
  };

  // Add all chargers by operator
  const handleAddAllChargersByOperator = async () => {
    if (!connectedAddress || !selectedOperator || operatorChargers.length === 0) return;
    
    try {
      // Add each charger as trusted
      for (const chargerId of operatorChargers) {
        await writePlugAndChargeAsync({
          functionName: "setTrustedCharger",
          args: [connectedAddress, BigInt(chargerId), true],
        });
      }
      
      setShowAddCharger(false);
      setSelectedOperator("");
      setOperatorChargers([]);
    } catch (error) {
      console.error("Error adding all chargers by operator:", error);
    }
  };

  // Generate random session salt
  const generateSessionSalt = () => {
    const randomBytes = Array.from({ length: 32 }, () => Math.floor(Math.random() * 256));
    const hex = randomBytes.map(b => b.toString(16).padStart(2, '0')).join('');
    setSessionSalt(`0x${hex}`);
  };

  // Claiming functions
  const handleDisputeProposal = async (sessionId: string) => {
    try {
      // Create a simple reason hash for the dispute
      const reasonHash = "0x0000000000000000000000000000000000000000000000000000000000000001";
      
      // Create a concatenated signature (r + s + v) - for now using empty signature
      // In real implementation, this would be a proper EIP-712 signature from the user
      const emptySignature = "
      
      await writePlugAndChargeAsync({
        functionName: "dispute",
        args: [BigInt(sessionId), reasonHash, emptySignature],
      });
      
      console.log("Dispute submitted successfully for session:", sessionId);
    } catch (error) {
      console.error("Error disputing proposal:", error);
      alert("Failed to dispute proposal. Check console for details.");
    }
  };

  const handleClaimRefund = async (sessionId: string) => {
    try {
      await writePlugAndChargeAsync({
        functionName: "refundIfStale",
        args: [BigInt(sessionId)],
      });
    } catch (error) {
      console.error("Error claiming refund:", error);
    }
  };

  // Start charging session
  const handleStartChargingSession = async () => {
    if (!connectedAddress || !selectedChargerId || !sessionDeposit) return;
    
    // Get vehicle hash (either from selection or from ISO-15118 identifier)
    let vehicleHash = selectedVehicleHash;
    if (sessionIso15118Id && !selectedVehicleHash) {
      // Use ISO-15118 identifier to get vehicle hash
      vehicleHash = vehicleHashByIso15118 || "";
    }
    
    if (!vehicleHash) {
      console.error("Please select a vehicle or provide ISO-15118 identifier");
      return;
    }
    
    try {
      const depositAmount = parseUnits(sessionDeposit, 6);
      
      await writePlugAndChargeAsync({
        functionName: "createSession",
        args: [
          vehicleHash as `0x${string}`,
          BigInt(selectedChargerId),
          sessionSalt as `0x${string}`,
          depositAmount,
          connectedAddress, // sponsor (or address(0) if driver is payer)
          false, // usePermit
          { value: 0n, deadline: 0n, v: 0, r: "0x0000000000000000000000000000000000000000000000000000000000000000", s: "0x0000000000000000000000000000000000000000000000000000000000000000" } // empty permit
        ],
      });
      
      // Reset form
      setSelectedVehicleHash("");
      setSelectedChargerId("");
      setSessionDeposit("50");
      setSessionSalt("");
      setSessionIso15118Id("");
    } catch (error) {
      console.error("Error starting charging session:", error);
    }
  };


  if (!connectedAddress) {
    return (
      <div className="min-h-screen bg-black text-white flex items-center justify-center">
        <div className="text-center">
          <h1 className="text-4xl font-bold mb-4 text-cyan-400">Driver Dashboard</h1>
          <p className="text-xl text-gray-300">Please connect your wallet to access the driver dashboard.</p>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-black text-white">
      {/* Header */}
      <div className="bg-gradient-to-r from-gray-900/80 to-gray-800/80 backdrop-blur-sm border-b border-gray-700/50">
        <div className="max-w-7xl mx-auto px-4 py-6">
          <div className="flex items-center justify-between">
            <div>
              <h1 className="text-3xl font-bold bg-gradient-to-r from-cyan-400 to-purple-400 bg-clip-text text-transparent">
                Driver Dashboard
              </h1>
              <p className="text-gray-400 mt-1">Manage your vehicles and charging sessions</p>
            </div>
            <div className="text-right">
              <p className="text-sm text-gray-400">Connected as:</p>
              <Address address={connectedAddress} />
            </div>
          </div>
        </div>
      </div>

      <div className="max-w-7xl mx-auto px-4 py-8">
        {/* USDC Balance & Approval */}
        <div className="grid md:grid-cols-2 gap-6 mb-8">
          <div className="bg-gradient-to-br from-gray-900/50 to-gray-800/50 backdrop-blur-sm p-6 rounded-3xl border border-cyan-500/20">
            <div className="flex items-center gap-3 mb-4">
              <CurrencyDollarIcon className="w-8 h-8 text-cyan-400" />
              <h3 className="text-xl font-bold text-cyan-400">USDC Balance</h3>
            </div>
            <p className="text-2xl font-bold text-white">
              {usdcBalance ? formatUSDC(usdcBalance) : "0 USDC"}
            </p>
          </div>

          <div className="bg-gradient-to-br from-gray-900/50 to-gray-800/50 backdrop-blur-sm p-6 rounded-3xl border border-green-500/20">
            <div className="flex items-center gap-3 mb-4">
              <CheckCircleIcon className="w-8 h-8 text-green-400" />
              <h3 className="text-xl font-bold text-green-400">USDC Approval</h3>
            </div>
            <p className="text-sm text-gray-400 mb-4">
              Allowance: {usdcAllowance ? formatUSDC(usdcAllowance) : "0 USDC"}
            </p>
            <div className="space-y-3">
              <div>
                <label className="block text-sm font-medium text-gray-300 mb-2">
                  Approval Amount (USDC)
                </label>
                <input
                  type="number"
                  placeholder="Enter amount..."
                  value={approvalAmount}
                  onChange={(e) => setApprovalAmount(e.target.value)}
                  className="w-full px-3 py-2 bg-gray-800 border border-gray-600 rounded-lg text-white"
                />
              </div>
              <div className="flex gap-2">
                <button
                  onClick={() => setApprovalAmount("100")}
                  className="px-3 py-1 bg-gray-700 hover:bg-gray-600 rounded text-sm text-white"
                >
                  100
                </button>
                <button
                  onClick={() => setApprovalAmount("500")}
                  className="px-3 py-1 bg-gray-700 hover:bg-gray-600 rounded text-sm text-white"
                >
                  500
                </button>
                <button
                  onClick={() => setApprovalAmount("1000")}
                  className="px-3 py-1 bg-gray-700 hover:bg-gray-600 rounded text-sm text-white"
                >
                  1000
                </button>
              </div>
              <button
                onClick={handleApproveUSDC}
                className="w-full px-4 py-2 bg-green-600 hover:bg-green-700 rounded-lg text-white font-medium transition-colors"
              >
                Approve {approvalAmount} USDC
              </button>
            </div>
          </div>
        </div>

        {/* Proposed Sessions - Action Required */}
        {proposedSessions.length > 0 && (
          <div className="mb-8">
            <h2 className="text-2xl font-bold mb-4 text-yellow-400 flex items-center gap-2">
              <ExclamationTriangleIcon className="w-6 h-6" />
              Action Required - Proposed Charges
            </h2>
            <div className="grid gap-4">
              {proposedSessions.map((session) => (
                <div key={session.sessionId} className="bg-gradient-to-br from-yellow-900/20 to-orange-900/20 backdrop-blur-sm p-6 rounded-3xl border border-yellow-500/20">
                  <div className="flex items-center justify-between">
                    <div>
                      <h3 className="text-lg font-bold text-yellow-400">Session #{session.sessionId}</h3>
                      <div className="flex items-center gap-2 mt-1">
                        <CarIcon className="w-4 h-4 text-blue-400" />
                        <span className="text-sm text-gray-300">
                          {decodeHexToString(session.vehicleHash).startsWith("Hash:") 
                            ? `Vehicle #${session.vehicleHash.slice(-4)}` 
                            : decodeHexToString(session.vehicleHash)}
                        </span>
                        {vehicleIso15118Status[session.vehicleHash] && (
                          <span className="text-xs px-2 py-1 rounded-full bg-green-500/20 text-green-400 border border-green-500/30">
                            ISO-15118
                          </span>
                        )}
                      </div>
                      <p className="text-gray-300">Charger ID: {session.chargerId}</p>
                      <p className="text-gray-300">Reserved: {formatUSDC(BigInt(session.reserved))}</p>
                      <p className="text-gray-300">Proposed: {formatUSDC(BigInt(session.proposed))}</p>
                      <p className="text-gray-300">Started: {new Date(session.startTs * 1000).toLocaleString()}</p>
                    </div>
                    <div className="flex gap-2">
                      <button
                        onClick={() => handleDisputeProposal(session.sessionId)}
                        className="px-4 py-2 bg-red-600 hover:bg-red-700 rounded-lg text-white font-medium transition-colors"
                      >
                        ⚠️ Dispute
                      </button>
                    </div>
                  </div>
                </div>
              ))}
            </div>
          </div>
        )}

        {/* Disputed Sessions */}
        {disputedSessions.length > 0 && (
          <div className="mb-8">
            <h2 className="text-2xl font-bold mb-4 text-red-400 flex items-center gap-2">
              <ExclamationTriangleIcon className="w-6 h-6" />
              Disputed Sessions - Waiting for Admin
            </h2>
            <div className="grid gap-4">
              {disputedSessions.map((session) => (
                <div key={session.sessionId} className="bg-gradient-to-br from-red-900/20 to-pink-900/20 backdrop-blur-sm p-6 rounded-3xl border border-red-500/20">
                  <div className="flex items-center justify-between">
                    <div>
                      <h3 className="text-lg font-bold text-red-400">Session #{session.sessionId}</h3>
                      <div className="flex items-center gap-2 mt-1">
                        <CarIcon className="w-4 h-4 text-blue-400" />
                        <span className="text-sm text-gray-300">
                          {decodeHexToString(session.vehicleHash).startsWith("Hash:") 
                            ? `Vehicle #${session.vehicleHash.slice(-4)}` 
                            : decodeHexToString(session.vehicleHash)}
                        </span>
                        {vehicleIso15118Status[session.vehicleHash] && (
                          <span className="text-xs px-2 py-1 rounded-full bg-green-500/20 text-green-400 border border-green-500/30">
                            ISO-15118
                          </span>
                        )}
                      </div>
                      <p className="text-gray-300">Charger ID: {session.chargerId}</p>
                      <p className="text-gray-300">Reserved: {formatUSDC(BigInt(session.reserved))}</p>
                      <p className="text-gray-300">Proposed: {formatUSDC(BigInt(session.proposed))}</p>
                      <p className="text-gray-300">Disputed: {new Date(session.proposeTs * 1000).toLocaleString()}</p>
                    </div>
                    <div className="text-red-400">
                      <span className="text-sm">⏳ Waiting for admin resolution</span>
                    </div>
                  </div>
                </div>
              ))}
            </div>
          </div>
        )}

        {/* Active Charging Sessions */}
        {activeSessions.length > 0 && (
          <div className="mb-8">
            <h2 className="text-2xl font-bold mb-4 text-orange-400 flex items-center gap-2">
              <BoltIcon className="w-6 h-6" />
              Active Charging Sessions
            </h2>
            <div className="grid gap-4">
              {activeSessions.map((session) => (
                <div key={session.sessionId} className="bg-gradient-to-br from-orange-900/20 to-red-900/20 backdrop-blur-sm p-6 rounded-3xl border border-orange-500/20">
                  <div className="flex items-center justify-between">
                    <div>
                      <h3 className="text-lg font-bold text-orange-400">Session #{session.sessionId}</h3>
                      <div className="flex items-center gap-2 mt-1">
                        <CarIcon className="w-4 h-4 text-blue-400" />
                        <span className="text-sm text-gray-300">
                          {decodeHexToString(session.vehicleHash).startsWith("Hash:") 
                            ? `Vehicle #${session.vehicleHash.slice(-4)}` 
                            : decodeHexToString(session.vehicleHash)}
                        </span>
                        {vehicleIso15118Status[session.vehicleHash] && (
                          <span className="text-xs px-2 py-1 rounded-full bg-green-500/20 text-green-400 border border-green-500/30">
                            ISO-15118
                          </span>
                        )}
                      </div>
                      <p className="text-gray-300">Charger ID: {session.chargerId}</p>
                      <p className="text-gray-300">Reserved: {formatUSDC(BigInt(session.reserved))}</p>
                    </div>
                    <div className="text-right">
                      <div className="flex items-center gap-2 text-green-400">
                        <div className="w-3 h-3 bg-green-400 rounded-full animate-pulse"></div>
                        <span className="font-medium">Charging</span>
                      </div>
                    </div>
                  </div>
                </div>
              ))}
            </div>
          </div>
        )}

        {/* Completed Sessions - History */}
        {completedSessions.length > 0 && (
          <div className="mb-8">
            <h2 className="text-2xl font-bold mb-4 text-green-400 flex items-center gap-2">
              <CheckCircleIcon className="w-6 h-6" />
              Charging History ({completedSessions.length})
            </h2>
            <div className="grid gap-4">
              {completedSessions.map((session) => (
                <div key={session.sessionId} className="bg-gradient-to-br from-green-900/20 to-blue-900/20 backdrop-blur-sm p-6 rounded-3xl border border-green-500/20">
                  <div className="flex items-center justify-between">
                    <div>
                      <h3 className="text-lg font-bold text-green-400">Session #{session.sessionId}</h3>
                      <div className="flex items-center gap-2 mt-1">
                        <CarIcon className="w-4 h-4 text-blue-400" />
                        <span className="text-sm text-gray-300">
                          {decodeHexToString(session.vehicleHash).startsWith("Hash:") 
                            ? `Vehicle #${session.vehicleHash.slice(-4)}` 
                            : decodeHexToString(session.vehicleHash)}
                        </span>
                        {vehicleIso15118Status[session.vehicleHash] && (
                          <span className="text-xs px-2 py-1 rounded-full bg-green-500/20 text-green-400 border border-green-500/30">
                            ISO-15118
                          </span>
                        )}
                      </div>
                      <p className="text-gray-300">Charger ID: {session.chargerId}</p>
                      <p className="text-gray-300">Final Amount: {formatUSDC(BigInt(session.proposed))}</p>
                      <p className="text-gray-300">Started: {new Date(session.startTs * 1000).toLocaleString()}</p>
                      <p className="text-gray-300">Ended: {session.endTs > 0 ? new Date(session.endTs * 1000).toLocaleString() : "N/A"}</p>
                    </div>
                    <div className="text-right">
                      <div className={`px-3 py-1 rounded-full text-sm font-medium ${
                        session.state === 4 
                          ? "bg-green-500/20 text-green-400 border border-green-500/30" 
                          : "bg-blue-500/20 text-blue-400 border border-blue-500/30"
                      }`}>
                        {session.state === 4 ? "✅ Settled" : "💙 Refunded"}
                      </div>
                      {session.state === 5 && (
                        <button
                          onClick={() => handleClaimRefund(session.sessionId)}
                          className="mt-2 px-3 py-1 bg-blue-600 hover:bg-blue-700 rounded-lg text-white text-sm font-medium transition-colors"
                        >
                          💸 Claim Refund
                        </button>
                      )}
                    </div>
                  </div>
                </div>
              ))}
            </div>
          </div>
        )}

        {/* My Vehicles */}
        <div className="mb-8">
          <div className="flex items-center justify-between mb-4">
            <h2 className="text-2xl font-bold text-blue-400 flex items-center gap-2">
              <CarIcon className="w-6 h-6" />
              My Vehicles (11)
            </h2>
            <button
              onClick={() => setShowAddVehicle(!showAddVehicle)}
              className="px-4 py-2 bg-blue-600 hover:bg-blue-700 rounded-lg text-white font-medium transition-colors flex items-center gap-2"
            >
              <PlusIcon className="w-4 h-4" />
              Add Vehicle
            </button>
          </div>

          {showAddVehicle && (
            <div className="bg-gradient-to-br from-gray-900/50 to-gray-800/50 backdrop-blur-sm p-6 rounded-3xl border border-blue-500/20 mb-4">
              <h3 className="text-lg font-bold text-blue-400 mb-4">Register New Vehicle</h3>
              <div className="grid md:grid-cols-2 gap-4 mb-4">
                <div>
                  <label className="block text-sm font-medium text-gray-300 mb-2">
                    Vehicle Name
                  </label>
                  <input
                    type="text"
                    placeholder="e.g., Tesla Model 3"
                    value={newVehicleName}
                    onChange={(e) => setNewVehicleName(e.target.value)}
                    className="w-full px-3 py-2 bg-gray-800 border border-gray-600 rounded-lg text-white"
                  />
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-300 mb-2">
                    Chip ID
                  </label>
                  <input
                    type="text"
                    placeholder="e.g., CHIP123456"
                    value={newChipId}
                    onChange={(e) => setNewChipId(e.target.value)}
                    className="w-full px-3 py-2 bg-gray-800 border border-gray-600 rounded-lg text-white"
                  />
                </div>
              </div>
              <div className="grid md:grid-cols-2 gap-4 mb-4">
                <div>
                  <label className="block text-sm font-medium text-gray-300 mb-2">
                    ISO 15118 Identifier
                  </label>
                  <input
                    type="text"
                    placeholder="e.g., ISO15118_ID_123"
                    value={newIso15118Identifier}
                    onChange={(e) => setNewIso15118Identifier(e.target.value)}
                    className="w-full px-3 py-2 bg-gray-800 border border-gray-600 rounded-lg text-white"
                  />
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-300 mb-2">
                    ISO-15118 Support
                  </label>
                  <select
                    value={newIso15118Enabled.toString()}
                    onChange={(e) => setNewIso15118Enabled(e.target.value === "true")}
                    className="w-full px-3 py-2 bg-gray-800 border border-gray-600 rounded-lg text-white"
                  >
                    <option value="true">Enabled</option>
                    <option value="false">Disabled</option>
                  </select>
                </div>
              </div>
              <div className="flex gap-4">
                <button
                  onClick={handleAddVehicle}
                  className="px-6 py-2 bg-blue-600 hover:bg-blue-700 rounded-lg text-white font-medium transition-colors"
                >
                  Register Vehicle
                </button>
                <button
                  onClick={() => setShowAddVehicle(false)}
                  className="px-6 py-2 bg-gray-600 hover:bg-gray-700 rounded-lg text-white font-medium transition-colors"
                >
                  Cancel
                </button>
              </div>
            </div>
          )}

          {vehicles.length === 0 ? (
            <div className="bg-gradient-to-br from-gray-900/50 to-gray-800/50 backdrop-blur-sm p-8 rounded-3xl border border-gray-700/50 text-center">
              <CarIcon className="w-16 h-16 text-gray-500 mx-auto mb-4" />
              <h3 className="text-xl font-bold text-gray-400 mb-2">No vehicles registered</h3>
              <p className="text-gray-500">Register your vehicle to start using Plug&Charge</p>
            </div>
          ) : (
            <div className="grid md:grid-cols-2 lg:grid-cols-3 gap-4">
              {vehicles.map((vehicle, index) => (
                <VehicleCard key={index} vehicle={vehicle} index={index} />
              ))}
            </div>
          )}
        </div>

        {/* Trusted Chargers */}
        <div className="mb-8">
          <div className="flex items-center justify-between mb-4">
            <h2 className="text-2xl font-bold text-green-400 flex items-center gap-2">
              <StarIcon className="w-6 h-6" />
              Trusted Chargers ({trustedChargers.length})
            </h2>
            <button
              onClick={() => setShowAddCharger(!showAddCharger)}
              className="px-4 py-2 bg-green-600 hover:bg-green-700 rounded-lg text-white font-medium transition-colors flex items-center gap-2"
            >
              <PlusIcon className="w-4 h-4" />
              Add Charger
            </button>
          </div>

          {showAddCharger && (
            <div className="bg-gradient-to-br from-gray-900/50 to-gray-800/50 backdrop-blur-sm p-6 rounded-3xl border border-green-500/20 mb-4">
              <h3 className="text-lg font-bold text-green-400 mb-4">Add Trusted Charger</h3>
              
              {/* Mode Selection */}
              <div className="flex gap-4 mb-4">
                <button
                  onClick={() => setAddChargerMode("id")}
                  className={`px-4 py-2 rounded-lg font-medium transition-colors ${
                    addChargerMode === "id" 
                      ? "bg-green-600 text-white" 
                      : "bg-gray-700 text-gray-300 hover:bg-gray-600"
                  }`}
                >
                  Add by Charger ID
                </button>
                <button
                  onClick={() => setAddChargerMode("operator")}
                  className={`px-4 py-2 rounded-lg font-medium transition-colors ${
                    addChargerMode === "operator" 
                      ? "bg-green-600 text-white" 
                      : "bg-gray-700 text-gray-300 hover:bg-gray-600"
                  }`}
                >
                  Add by Operator
                </button>
              </div>

              {addChargerMode === "id" ? (
                <div className="flex gap-4">
                  <input
                    type="number"
                    placeholder="Charger ID"
                    value={newChargerId}
                    onChange={(e) => setNewChargerId(e.target.value)}
                    className="flex-1 px-3 py-2 bg-gray-800 border border-gray-600 rounded-lg text-white"
                  />
                  <button
                    onClick={handleAddTrustedCharger}
                    className="px-6 py-2 bg-green-600 hover:bg-green-700 rounded-lg text-white font-medium transition-colors"
                  >
                    Add
                  </button>
                  <button
                    onClick={() => setShowAddCharger(false)}
                    className="px-6 py-2 bg-gray-600 hover:bg-gray-700 rounded-lg text-white font-medium transition-colors"
                  >
                    Cancel
                  </button>
                </div>
              ) : (
                <div className="space-y-4">
                  <div>
                    <label className="block text-sm font-medium text-gray-300 mb-2">
                      Charging Station Operator Address
                    </label>
                    <input
                      type="text"
                      placeholder="0x..."
                      value={selectedOperator}
                      onChange={(e) => setSelectedOperator(e.target.value)}
                      className="w-full px-3 py-2 bg-gray-800 border border-gray-600 rounded-lg text-white"
                    />
                    <p className="text-xs text-gray-400 mt-1">
                      Enter the wallet address of the charging station operator
                    </p>
                  </div>
                  {selectedOperator && (
                    <div className="bg-gray-800/50 p-4 rounded-lg">
                      <p className="text-sm text-gray-400 mb-2">
                        <strong>Operator Address:</strong> {selectedOperator}
                      </p>
                      {operatorChargers.length > 0 ? (
                        <div className="mb-4">
                          <p className="text-sm text-gray-300 mb-2">
                            Found {operatorChargers.length} charger(s): {operatorChargers.join(", ")}
                          </p>
                        </div>
                      ) : (
                        <p className="text-sm text-gray-500 mb-4">No chargers found for this operator</p>
                      )}
                      <div className="flex gap-4">
                        <button
                          onClick={handleAddAllChargersByOperator}
                          disabled={operatorChargers.length === 0}
                          className="px-6 py-2 bg-green-600 hover:bg-green-700 disabled:bg-gray-600 disabled:cursor-not-allowed rounded-lg text-white font-medium transition-colors"
                        >
                          Add All Chargers ({operatorChargers.length})
                        </button>
                        <button
                          onClick={() => {
                            setShowAddCharger(false);
                            setSelectedOperator("");
                            setOperatorChargers([]);
                          }}
                          className="px-6 py-2 bg-gray-600 hover:bg-gray-700 rounded-lg text-white font-medium transition-colors"
                        >
                          Cancel
                        </button>
                      </div>
                    </div>
                  )}
                </div>
              )}
            </div>
          )}

          {trustedChargers.length === 0 ? (
            <div className="bg-gradient-to-br from-gray-900/50 to-gray-800/50 backdrop-blur-sm p-8 rounded-3xl border border-gray-700/50 text-center">
              <StarIcon className="w-16 h-16 text-gray-500 mx-auto mb-4" />
              <h3 className="text-xl font-bold text-gray-400 mb-2">No trusted chargers</h3>
              <p className="text-gray-500">Add chargers you trust for seamless charging</p>
            </div>
          ) : (
            <div className="grid md:grid-cols-2 lg:grid-cols-3 gap-4">
              {trustedChargers.map((charger) => (
                <div key={charger.chargerId} className="bg-gradient-to-br from-gray-900/50 to-gray-800/50 backdrop-blur-sm p-6 rounded-3xl border border-green-500/20">
                  <div className="flex items-center justify-between mb-4">
                    <div className="flex items-center gap-3">
                      <BoltIcon className="w-8 h-8 text-green-400" />
                      <h3 className="text-lg font-bold text-green-400">Charger #{charger.chargerId}</h3>
                    </div>
                    <button
                      onClick={() => handleRemoveTrustedCharger(charger.chargerId)}
                      className="text-red-400 hover:text-red-300 transition-colors"
                    >
                      <XCircleIcon className="w-5 h-5" />
                    </button>
                  </div>
                  <div className="space-y-2 text-sm">
                    <p className="text-gray-300">
                      <span className="text-gray-500">Charger ID:</span> #{charger.chargerId}
                    </p>
                    <p className="text-gray-300">
                      <span className="text-gray-500">Power:</span> {charger.powerKW} kW
                    </p>
                    <p className="text-gray-300">
                      <span className="text-gray-500">Price:</span> ${charger.pricePerKWhMilliUSD / 1000}/kWh
                    </p>
                    <div className="flex items-center gap-2">
                      <span className="text-gray-500">Status:</span>
                      {charger.active ? (
                        <div className="flex items-center gap-1 text-green-400">
                          <div className="w-2 h-2 bg-green-400 rounded-full"></div>
                          <span className="text-xs">Active</span>
                        </div>
                      ) : (
                        <div className="flex items-center gap-1 text-red-400">
                          <div className="w-2 h-2 bg-red-400 rounded-full"></div>
                          <span className="text-xs">Inactive</span>
                        </div>
                      )}
                    </div>
                  </div>
                </div>
              ))}
            </div>
          )}
        </div>

        {/* Start Charging Session */}
        <div className="mb-8">
          <h2 className="text-2xl font-bold mb-4 text-purple-400 flex items-center gap-2">
            <BoltIcon className="w-6 h-6" />
            Start Charging Session
          </h2>
          <div className="bg-gradient-to-br from-gray-900/50 to-gray-800/50 backdrop-blur-sm p-6 rounded-3xl border border-purple-500/20">
            <div className="grid md:grid-cols-2 gap-6">
              <div>
                <label className="block text-sm font-medium text-gray-300 mb-2">
                  Select Vehicle
                </label>
                <select 
                  value={selectedVehicleHash}
                  onChange={(e) => {
                    setSelectedVehicleHash(e.target.value);
                    if (e.target.value) setSessionIso15118Id(""); // Clear ISO-15118 when vehicle is selected
                  }}
                  className="w-full px-3 py-2 bg-gray-800 border border-gray-600 rounded-lg text-white"
                >
                  <option value="">Choose your vehicle...</option>
                  {vehicles.map((vehicle, index) => (
                    <option key={index} value={vehicle.vehicleHash}>
                      {decodeHexToString(vehicle.vehicleHash).startsWith('Hash:') 
                        ? `Vehicle #${index + 1}` 
                        : decodeHexToString(vehicle.vehicleHash)
                      } {vehicle.iso15118Enabled ? "(ISO-15118)" : ""}
                    </option>
                  ))}
                </select>
                <p className="text-xs text-gray-400 mt-1">
                  OR use ISO-15118 identifier below
                </p>
              </div>
              <div>
                <label className="block text-sm font-medium text-gray-300 mb-2">
                  ISO-15118 Identifier (Alternative)
                </label>
                <input
                  type="text"
                  placeholder="Enter ISO-15118 identifier (e.g., ISO15118_ID_123)"
                  value={sessionIso15118Id}
                  onChange={(e) => {
                    setSessionIso15118Id(e.target.value);
                    if (e.target.value) setSelectedVehicleHash(""); // Clear vehicle selection when ISO-15118 is entered
                  }}
                  className="w-full px-3 py-2 bg-gray-800 border border-gray-600 rounded-lg text-white"
                />
                <p className="text-xs text-gray-400 mt-1">
                  Use this if you prefer ISO-15118 identification over vehicle selection
                </p>
              </div>
            </div>
            <div className="grid md:grid-cols-2 gap-6 mt-6">
              <div>
                <label className="block text-sm font-medium text-gray-300 mb-2">
                  Charger ID
                </label>
                <input
                  type="text"
                  placeholder="Enter charger ID (e.g., 1, 2, 3...)"
                  value={selectedChargerId}
                  onChange={(e) => setSelectedChargerId(e.target.value)}
                  className="w-full px-3 py-2 bg-gray-800 border border-gray-600 rounded-lg text-white"
                />
                <p className="text-xs text-gray-400 mt-1">
                  Enter the ID of a trusted charger you want to use
                </p>
              </div>
              <div>
                {/* Empty div for layout balance */}
              </div>
            </div>
            <div className="mt-6">
              <label className="block text-sm font-medium text-gray-300 mb-2">
                Initial Deposit (USDC)
              </label>
              <div className="flex gap-4">
                <input
                  type="number"
                  step="0.01"
                  placeholder="Enter amount..."
                  value={sessionDeposit}
                  onChange={(e) => setSessionDeposit(e.target.value)}
                  className="flex-1 px-3 py-2 bg-gray-800 border border-gray-600 rounded-lg text-white"
                />
                <button 
                  onClick={handleStartChargingSession}
                  disabled={(!selectedVehicleHash && !sessionIso15118Id) || !selectedChargerId || !sessionDeposit}
                  className="px-6 py-2 bg-purple-600 hover:bg-purple-700 disabled:bg-gray-600 disabled:cursor-not-allowed rounded-lg text-white font-medium transition-colors"
                >
                  Start Session
                </button>
              </div>
              <p className="text-xs text-gray-400 mt-2">
                Minimum deposit: 10 USDC | Maximum deposit: 1000 USDC
              </p>
            </div>
          </div>
        </div>

        {/* Charging History */}
        <div>
          <h2 className="text-2xl font-bold mb-4 text-purple-400 flex items-center gap-2">
            <ClockIcon className="w-6 h-6" />
            Recent Charging Sessions
          </h2>
          <div className="bg-gradient-to-br from-gray-900/50 to-gray-800/50 backdrop-blur-sm p-8 rounded-3xl border border-gray-700/50 text-center">
            <ClockIcon className="w-16 h-16 text-gray-500 mx-auto mb-4" />
            <h3 className="text-xl font-bold text-gray-400 mb-2">No charging history</h3>
            <p className="text-gray-500">Your charging sessions will appear here</p>
          </div>
        </div>
      </div>
    </div>
  );
};

export default DriverPage;
